{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React, { useState } from 'react';\nimport styles from './art.module.scss';\nimport Link from 'next/link'; // import { ConnectedPager } from '../pager/pager'\n\nimport Layout from '../../components/layout';\nimport { fetchArtworkPagedData, fetchArtworkMediaTypes } from '../../lib/api';\nimport Card from 'react-bootstrap/Card';\nimport Pager from '../../components/pager/pager';\nimport Head from 'next/head';\nexport default function ArtListPage({\n  artData,\n  menuItems\n}) {\n  const pageSize = process.env.NEXT_PUBLIC_PAGESIZE;\n  const {\n    0: artWork,\n    1: setArt\n  } = useState(artData);\n  const {\n    0: pageNum,\n    1: setPage\n  } = useState(1);\n  const {\n    0: mediaType,\n    1: setMedia\n  } = useState('all');\n  const {\n    0: mediaItems,\n    1: setMediaItems\n  } = useState(menuItems);\n\n  function goToPage(val) {\n    setPage(val);\n    getPagedArtwork(val);\n  }\n\n  const nextPage = () => {\n    const page = pageNum + 1;\n    setPage(page);\n    getPagedArtwork(page);\n  };\n\n  const prevPage = () => {\n    const page = pageNum - 1;\n    console.log(\"Prev\", page);\n    setPage(page);\n    getPagedArtwork(page);\n  };\n\n  let artLoaded = artData.results.length > 0;\n  console.log(\"In return:\", process.env.NEXT_PUBLIC_PAGESIZE);\n\n  const getPagedArtwork = async page => {\n    const url = `${process.env.NEXT_PUBLIC_REACT_APP_API_SERVER}/api/artwork/media/?media=${mediaType}&page=${page}&page_size=${pageSize}`;\n    const response = await fetchArtworkPagedData(url);\n    setArt(response);\n  };\n\n  const getMenuItems = async () => {\n    const data = await fetchArtworkMediaTypes();\n    setMediaItems(data);\n  };\n\n  const getArtworkByMedia = async e => {\n    setPage(1);\n    setMedia(e.target.value);\n    const url = `${process.env.NEXT_PUBLIC_REACT_APP_API_SERVER}/api/artwork/media/?media=${e.target.value}&page=1&page_size=${pageSize}`;\n    const response = await fetchArtworkPagedData(url);\n    setArt(response);\n  };\n\n  let art;\n\n  if (artLoaded) {\n    art = /*#__PURE__*/_jsxs(Layout, {\n      children: [/*#__PURE__*/_jsxs(Head, {\n        children: [/*#__PURE__*/_jsx(\"title\", {\n          children: \"Brad Rice's art\"\n        }), /*#__PURE__*/_jsx(\"meta\", {\n          property: \"og:title\",\n          content: \"Brad Rice's art\"\n        }, \"title\")]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: styles.artHolder,\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsx(\"div\", {\n            className: \"col-sm-12 col-md-4\",\n            children: /*#__PURE__*/_jsxs(\"div\", {\n              className: \"form-conntrol filter-control\",\n              children: [/*#__PURE__*/_jsx(\"label\", {\n                htmlFor: \"media\",\n                className: \"form-label\",\n                children: \"Filter by Media\"\n              }), /*#__PURE__*/_jsxs(\"select\", {\n                className: \"form-select\",\n                id: \"meida-select\",\n                name: \"media\",\n                onChange: getArtworkByMedia,\n                children: [/*#__PURE__*/_jsx(\"option\", {\n                  value: \"all\",\n                  children: \"All\"\n                }), mediaItems.map((item, v) => /*#__PURE__*/_jsx(\"option\", {\n                  value: item.key,\n                  children: item.value\n                }))]\n              })]\n            })\n          })\n        })\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.artHolder,\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: \"row\",\n          children: (artWork.results || []).map(item => /*#__PURE__*/_jsx(\"div\", {\n            className: `col-sm-4 ${styles.cardCol}`,\n            children: /*#__PURE__*/_jsxs(Card, {\n              className: styles.cardItem,\n              children: [/*#__PURE__*/_jsx(Link, {\n                href: `/art/${item.id}`,\n                children: /*#__PURE__*/_jsx(Card.Img, {\n                  className: styles.cardImage,\n                  src: item.artimage.gallery_medium,\n                  alt: item.title\n                })\n              }), /*#__PURE__*/_jsxs(Card.Body, {\n                children: [/*#__PURE__*/_jsx(Card.Title, {\n                  children: item.title\n                }), /*#__PURE__*/_jsx(Card.Text, {\n                  className: styles.cardText,\n                  children: item.sold ? /*#__PURE__*/_jsx(\"span\", {\n                    className: styles.sold,\n                    children: \"Sold\"\n                  }) : \"\"\n                }), /*#__PURE__*/_jsx(Link, {\n                  href: `/art/${item.id}`,\n                  children: \"Detail\"\n                })]\n              })]\n            })\n          }, item.id))\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"col-sm-12\",\n          children: /*#__PURE__*/_jsx(Pager, {\n            artData: artWork,\n            pageTo: goToPage,\n            goNext: nextPage,\n            goPrev: prevPage,\n            pageNum: pageNum,\n            pageCount: artWork.count\n          })\n        })]\n      })]\n    });\n  } else {\n    art = /*#__PURE__*/_jsx(\"div\", {\n      children: \"The server must be down currently. Please check back later.\"\n    });\n  }\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    children: art\n  });\n}\nexport async function getServerSideProps() {\n  const pageSize = process.env.NEXT_PUBLIC_PAGESIZE;\n  const [artData, menuItems] = await Promise.all([fetchArtworkPagedData(`${process.env.NEXT_PUBLIC_REACT_APP_API_SERVER}/api/artwork/?page=1&page_size=${pageSize}`), fetchArtworkMediaTypes()]);\n  return {\n    props: {\n      artData,\n      menuItems\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}